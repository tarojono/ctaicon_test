
body{
  height: 100vh;
  margin: 0;
  display: flex;
  justify-content: center;
  align-items: center;

}
.container{
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 32px;
  width: 652px;
  
  
}

.title-group--l{
  display: flex;
  width: 100%;
  height: 54px;
  flex-direction: column;
  align-items: flex-start;
  gap: 10px;
}


.title-group--m{
  display: flex;
  height: 44px;
  justify-content: space-between;
  align-items: flex-end;
  align-self: stretch;
  padding-bottom: 10px;
  border-bottom: 1px solid var(--Semantic-Communication-Border-primary, #DEDEE3);
}

.title{
  height: 100%;
  margin-bottom: 5px;
  padding: 0px;
}

h1{
  color: var(--Semantic-Communication-Content-primary, #1B1B1C);
  text-align: center;
  font-feature-settings: 'clig' off, 'liga' off;
  font-family: "Futura PT";
  font-size: 55px;
  font-style: normal;
  font-weight: 450;
  line-height: 110%; /* 61.6px */
  -webkit-font-smoothing: antialiased; /* WebKitブラウザ用 (例: Safari, Chrome) */
  -moz-osx-font-smoothing: grayscale; 
}

h6{
  color: var(--Semantic-Communication-Content-inverse-primary, #FFF);
  text-align: center;
  font-feature-settings: 'palt' on, 'clig' off, 'liga' off;
  
  /* Com/JP/Narrow/Heading/XS */
  font-family: "Noto Sans JP";
  font-size: 16px;
  font-style: normal;
  font-weight: 700;
  line-height: 160%; /* 25.6px */
  letter-spacing: 0.96px;
  -webkit-font-smoothing: antialiased; /* WebKitブラウザ用 (例: Safari, Chrome) */
  -moz-osx-font-smoothing: grayscale; 
}

h5{
  color: var(--Semantic-Communication-Content-primary, #1B1B1C);
  text-align: center;
  font-feature-settings: 'clig' off, 'liga' off;
  font-family: "Futura PT";
  font-size: 16px;
  font-style: normal;
  font-weight: 450;
  line-height: 110%; /* 17.6px */
  margin: 0px;
  padding: 0px;
}

.playicon{
  width: 24px;
  height: 24px;
  background-image: url('Play.svg');
  background-size: contain;
  background-repeat: no-repeat;
}


.playgroup:hover{
  opacity: 70%;
  cursor: pointer;
}

.playtext{
  margin-bottom: -3px;
  color: 1b1b1c;
}

.playgroup{
  display: flex;
  align-items: center;
  gap: 4px;
}

.button-group{
  display: flex;
  align-items: flex-start;
  gap: 32px;
}

.button-group-s{
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 16px;
}

.button-L{
  width: 104pxpx;
  height: 104px;

}

.button{
  display: flex;
  width: 160px;
  height: 24px;
  min-width: 160px;
  padding: 16px 18px;
  justify-content: center;
  align-items: center;
  gap: 8px;
  border-radius: 9999px;
  background: var(--Semantic-Communication-Background-inverse-primary, #000);
  transition: all 200ms cubic-bezier(0.3, 0, 0, 1);
  cursor: pointer;
}



.button:hover{
 background: var(--Primitive-grey-700, #323233);
}

.button:active{
  background: var(--design-system-gray-600, #646466);
}


.ctaicon{
  width: 24px;
  height: 24px; 
}

.control-group{
  display: flex;
  align-items: center;
  justify-content: center;
  margin-top: 8px;
  height: 24px;
  gap: 24px;
}

.radio-container {
  position: relative;
  width:24px;
  height:24px;
  cursor: pointer;
  user-select: none;

}

.radio-container input {
  position: absolute;
  opacity: 0;
  cursor: pointer;
}

.radio-checkmark {
  position: absolute;
  top: 1px;
  left: 1px;
  height: 18px;
  width: 18px;
  background-color: #ffffff;
  border-radius: 50%;
  border: 2px solid #1b1b1c;
}

.radio-container:hover .radio-checkmark {
  border-color: #323233; /* ホバー時にラインの色を変更 */
}

.radio-container input:checked ~ .radio-checkmark:after {
  content: "";
  position: absolute;
  display: block;
  top: 3px;
  left: 3px;
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background: #1b1b1c;
  animation: clickEffect 200ms cubic-bezier(0.3, 0, 0, 1);
}

.radio-container:hover .radio-checkmark:after {
  background: #323233; /* ホバー時にマルポチの色を変更 */
}

@keyframes clickEffect {
  from {
    transform: scale(0);
  }
  to {
    transform: scale(1);
  }
}

.checkbox-container{
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  width: 24px;
  height: 24px;
  cursor: pointer;
  user-select: none;

}

.checkbox-container input {

  opacity: 0;
}

.checkbox-container input:checked ~ .checkmark {
  width: 18px;
  height: 18px;
  border-color: #1B1B1C;
  background-color: #1b1b1c; /* ここで背景色を設定 */
  border-radius: 2px;
  opacity: 0; /* 初期状態では透明 */
  animation: opacityEffect 200ms cubic-bezier(0.3, 0, 0, 1) forwards; /* アニメーション適用 */

}


.checkmark {
  position: absolute;
  width: 18px;
  height: 18px;
  background-color: #FFF;
  border: 2px solid #1b1b1c;
  border-radius: 2px;
  /* 初期状態では疑似要素を表示しないため、ここではopacityを設定しない */
}

.checkmark-mark{
  position: absolute;
  margin: 0px;
  padding: ;
  top: -3px;
  left: -3px;
  width: 24px;
  height: 24px;
  fill: none;
}



.checkbox-container input:checked ~ .checkmark .path {
  stroke: #ffffff;
  stroke-width: 2;
  stroke-linecap: round; /* ストロークの先を丸くする */
  stroke-linejoin: round; 
  stroke-dasharray: 29; /* パスの全長に相当する値 */
  stroke-dashoffset: 29; /* アニメーション開始時の値 */
  animation: draw 400ms cubic-bezier(0.3, 0, 0, 1) forwards; /* ここでアニメーションを適用 */
}


@keyframes opacityEffect {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes draw {
  from {
    stroke-dashoffset: 29; /* ここでパスの全長を指定 */
  }
  to {
    stroke-dashoffset: 0;
  }
} */